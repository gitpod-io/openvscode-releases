name: Publish to GitHub releases
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit to release'
        required: true
      quality:
        description: 'Quality: insiders or stable'
        required: true
        default: stable
      uploadRelease:
        description: 'Create GitHub and DockerHub Release'
        required: false
        default: "false"
  workflow_run:
    workflows: ["Insiders"]
    types: [completed]

env:
  QUALITY: ${{ github.event.inputs.quality || 'insiders' }}
  RELEASE_COMMIT: ${{ github.event.inputs.commit || 'main' }}

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-18.04, macos-11, windows-latest]
        # support only ubuntu for now
        os: [ubuntu-18.04]
        arch: [x64, arm64, armhf]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}/${{ matrix.arch }}
    if: github.event.inputs.commit || github.event.workflow_run.conclusion == 'success'
    steps:  
        # Get the release commit from the Insiders workflow
      - name: Download artifact
        if: github.event.workflow_run.conclusion == 'success'
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: insiders.yml
          name: release_commit
      - name: Read release commit from file
        if: github.event.workflow_run.conclusion == 'success'
        run: |
          echo "RELEASE_COMMIT=$(cat __release_commit.txt)" >> $GITHUB_ENV
      
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.repository_owner }}/openvscode-server
          ref: ${{ env.RELEASE_COMMIT }}
          path: openvscode-server
          token: ${{ secrets.VSCODE_GITHUB_TOKEN }}

      - name: Setup Build Environment
        working-directory: ./openvscode-server
        run: |
          sudo apt-get update
          sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
          sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
          sudo chmod +x /etc/init.d/xvfb
          sudo update-rc.d xvfb defaults
          sudo service xvfb start

      - uses: actions/setup-node@v2
        with:
          node-version: 14
      
      - name: Compute node modules cache key
        working-directory: ./openvscode-server
        id: nodeModulesCacheKey
        run: echo "::set-output name=value::$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js)"
      - name: Cache node modules
        id: cacheNodeModules
        uses: actions/cache@v2
        with:
          path: "openvscode-server/**/node_modules"
          key: ${{ runner.os }}-cacheNodeModules14-${{ steps.nodeModulesCacheKey.outputs.value }}
          restore-keys: ${{ runner.os }}-cacheNodeModules14-
      - name: Get yarn cache directory path
        working-directory: ./openvscode-server
        id: yarnCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn directory
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarnCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-yarnCacheDir-${{ steps.nodeModulesCacheKey.outputs.value }}
          restore-keys: ${{ runner.os }}-yarnCacheDir-
      - name: Execute yarn
        working-directory: ./openvscode-server
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
        run: yarn --frozen-lockfile --network-timeout 180000
      
      - name: Prepare for distribution
        working-directory: ./openvscode-server
        run: yarn gulp vscode-reh-web-linux-${{ matrix.arch }}-min
      
      - name: Download playwright
        working-directory: ./openvscode-server
        run: |
          yarn playwright-install 

      - name: Compile test suites
        working-directory: ./openvscode-server
        run: |
          set -e
          yarn --cwd test/smoke compile
          yarn --cwd test/integration/browser compile

      - name: Run integration tests
        if: matrix.arch == 'x64'
        working-directory: ./openvscode-server
        run: |
          set -e
          VSCODE_REMOTE_SERVER_PATH="$GITHUB_WORKSPACE/vscode-reh-web-linux-${{ matrix.arch }}" \
          ./resources/server/test/test-web-integration.sh --browser chromium

      - name: Run smoke tests
        if: matrix.arch == 'x64'
        working-directory: ./openvscode-server
        run: |
          set -e
          VSCODE_REMOTE_SERVER_PATH="$GITHUB_WORKSPACE/vscode-reh-web-linux-${{ matrix.arch }}" \
          yarn smoketest --web --headless --electronArgs="--disable-dev-shm-usage --use-gl=swiftshader"
      
      - name: Determine archive filename
        uses: haya14busa/action-cond@v1
        id: archive
        with:
          cond: ${{ runner.os == 'Windows' }}
          if_true: 'zip'
          if_false: 'tar.gz'
      
      - name: Set environment variables (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          echo "EXTENSION=${{ steps.archive.outputs.value }}" >> $GITHUB_ENV
          echo "VERSION=$(node -p -e "require('./openvscode-server/package.json').version")" >> $GITHUB_ENV
      
      - name: Set archive file name (Windows)
        if: runner.os == 'Windows'
        run: |
          chcp 65001
          echo ("ARCHIVE_NAME=openvscode-server-v" + $(node -p -e "require('./openvscode-server/package.json').version")+"-"+ $("${{ runner.os }}".tolower())+"-${{ matrix.arch }}") >> $env:GITHUB_ENV
          echo ("ARCHIVE_FULL_NAME=openvscode-server-v" + $(node -p -e "require('./openvscode-server/package.json').version")+"-"+ $("${{ runner.os }}".tolower())+"-${{ matrix.arch }}.${{ steps.archive.outputs.value }}") >> $env:GITHUB_ENV
      - name: Set archive file name
        run: |
          os_name=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')
          quality_name=$([ "$QUALITY" == "insiders" ] && echo "-insiders" || echo "")
          name="openvscode-server${quality_name}-v${VERSION}-${os_name}-${{ matrix.arch }}"
          echo "ARCHIVE_NAME=$name" >> $GITHUB_ENV
          echo "ARCHIVE_FULL_NAME=$name.$EXTENSION" >> $GITHUB_ENV
      
      - name: Rename the bundle file
        run: |
          mv vscode-reh-web-linux-${{ matrix.arch }}/ ${{ env.ARCHIVE_NAME }}/
      
      - name: Bundle tarfile
        if: runner.os != 'Windows'
        run: |
          sudo tar cfzv ${{ env.ARCHIVE_FULL_NAME }} ${{ env.ARCHIVE_NAME }}/ > /dev/null
      - name: Bundle zip
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path ${{ env.ARCHIVE_NAME }}\* -CompressionLevel Optimal -DestinationPath ${{ env.ARCHIVE_FULL_NAME }}
      
      - name: Archive sanity check
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: ${{ env.ARCHIVE_FULL_NAME }}

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
  
  upload:
    needs: build 
    runs-on: ubuntu-latest
    name: Create the release
    if: github.event.inputs.uploadRelease == 'true' || github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: outputs/
      
      - run: |
          echo "VERSION=$(ls outputs/Linux-x64 | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')" >> $GITHUB_ENV
      
      - name: Create stable release
        if: env.QUALITY == 'stable'
        uses: softprops/action-gh-release@v1
        with:
          repository: ${{ github.repository_owner }}/openvscode-server
          target_commitish: ${{ env.RELEASE_COMMIT }}
          body: OpenVSCode Server v${{ env.VERSION }}
          tag_name: openvscode-server-v${{ env.VERSION }}
          token: ${{ secrets.VSCODE_GITHUB_TOKEN }}
          files: |
            outputs/**/*.tar.gz
            outputs/**/*.zip

      - name: Delete previous insiders release
        if: env.QUALITY == 'insiders'
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          repo: ${{ github.repository_owner }}/openvscode-server
          keep_latest: 0
          delete_tags: true
          delete_tag_pattern: openvscode-server-insiders
        env:
          GITHUB_TOKEN: ${{ secrets.VSCODE_GITHUB_TOKEN }}
      - name: Sleep
        if: env.QUALITY == 'insiders'
        run: sleep 30s
      - name: Create Insiders release
        if: env.QUALITY == 'insiders'
        uses: softprops/action-gh-release@v1
        with:
          repository: ${{ github.repository_owner }}/openvscode-server
          target_commitish: ${{ env.RELEASE_COMMIT }}
          body: OpenVSCode Server Insiders v${{ env.VERSION }}
          tag_name: openvscode-server-insiders-v${{ env.VERSION }}
          prerelease: true
          token: ${{ secrets.VSCODE_GITHUB_TOKEN }}
          files: |
            outputs/**/*.tar.gz
            outputs/**/*.zip

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
  
  docker:
    needs: upload
    runs-on: ubuntu-latest
    name: Build and publish Docker image
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          path: outputs/
      
      - name: Set server version
        run: |
          echo "RELEASE_TAG=$(ls outputs/Linux-x64 | sed -nre 's/^(.*)-linux-x64.tar.gz/\1/p')" >> $GITHUB_ENV
          echo "VERSION=$(ls outputs/Linux-x64 | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            gitpod/openvscode-server
          tags: |
            type=semver,pattern={{version}},value=v${{ env.VERSION }},enable=${{ env.QUALITY == 'stable' }}
            type=raw,value=insiders,enable=${{ env.QUALITY == 'insiders' }}
            type=raw,value=nightly,enable=${{ env.QUALITY == 'insiders' }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          platforms: |
            linux/amd64
            linux/arm64
            linux/arm/v7
          build-args: |
            RELEASE_TAG=${{ env.RELEASE_TAG }}
            RELEASE_ORG=${{ github.repository_owner }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}

name: Release OpenVSCode Server
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit to release'
        required: true
      quality:
        description: 'Quality'
        required: true
        type: choice
        options:
        - insider
        - stable
        default: insider
      uploadRelease:
        description: 'Create GitHub and DockerHub Release'
        type: boolean
        required: true
  workflow_run:
    workflows: ["OpenVSCode Server Rebase"]
    types: [completed]

env:
  QUALITY: ${{ github.event.inputs.quality || 'insider' }}
  RELEASE_COMMIT: ${{ github.event.inputs.commit || 'main' }}

jobs:
  build:
    runs-on: ubuntu-latest

    # support only linux for now
    strategy:
      fail-fast: true
      matrix:
        include:
        - vscode_arch: x64
          npm_arch: x64
          deps_container: gitpod/openvscode-server-linux-build-agent:centos7-devtoolset8-x64
        # - vscode_arch: arm64
        #   npm_arch: arm64
        #   deps_container: gitpod/openvscode-server-linux-build-agent:centos7-devtoolset8-arm64
        # - vscode_arch: armhf
        #   npm_arch: arm

    name: Build linux-${{ matrix.vscode_arch }}
    env:
      OS_NAME: 'linux'
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
      NPM_REGISTRY: 'https://registry.npmjs.org'
    steps:
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/openvscode-server
          ref: ${{ env.RELEASE_COMMIT }}
          fetch-depth: 20
          path: openvscode-server
          token: ${{ secrets.VSCODE_GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: ./openvscode-server/.nvmrc

      # - name: Setup system services
      #   working-directory: ./openvscode-server
      #   run: |
      #     set -e
      #     # Start X server
      #     ./build/azure-pipelines/linux/apt-retry.sh sudo apt-get update
      #     ./build/azure-pipelines/linux/apt-retry.sh sudo apt-get install -y pkg-config \
      #       dbus \
      #       xvfb \
      #       libgtk-3-0 \
      #       libxkbfile-dev \
      #       libkrb5-dev \
      #       libgbm1 \
      #       rpm
      #     sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
      #     sudo chmod +x /etc/init.d/xvfb
      #     sudo update-rc.d xvfb defaults
      #     sudo service xvfb start
      #     # Start dbus session
      #     sudo mkdir -p /var/run/dbus
      #     DBUS_LAUNCH_RESULT=$(sudo dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address)

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: 'test'
          SLACK_TITLE: Post test

  # github-release:
  #   needs: build
  #   if: github.event.inputs.uploadRelease == 'true' || github.event.workflow_run.conclusion == 'success'
  #   uses: ./.github/workflows/github-release.yml
  #   with:
  #     release_commit: ${{ needs.build.outputs.release_commit }}
  #     version: ${{ needs.build.outputs.version }}
  #     stable: ${{ needs.build.outputs.quality == 'stable' }}
  #   secrets:
  #     VSCODE_GITHUB_TOKEN: ${{ secrets.VSCODE_GITHUB_TOKEN }}
  #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # docker-release:
  #   needs: [github-release, build]
  #   if: github.event.inputs.uploadRelease == 'true' || github.event.workflow_run.conclusion == 'success'
  #   uses: ./.github/workflows/docker-release.yml
  #   with:
  #     version: ${{ needs.build.outputs.version }}
  #     stable: ${{ needs.build.outputs.quality == 'stable' }}
  #   secrets:
  #     DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #     DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

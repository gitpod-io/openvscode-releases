name: Release Gitpod Code
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit to release'
        required: true
      quality:
        description: 'Quality'
        required: true
        type: choice
        options:
        - insider
        - stable
        default: insider
  workflow_run:
    workflows: ["Gitpod Code Rebase"]
    types: [completed]

env:
  QUALITY: ${{ github.event.inputs.quality || 'insider' }}
  RELEASE_COMMIT: ${{ github.event.inputs.commit || 'gp-code/main' }}

jobs:
  build-dependencies:
    runs-on: ubuntu-latest
    container:
      image: gitpod/openvscode-server-linux-build-agent:centos7-devtoolset8-x64
    name: Build native dependencies linux-x64
    if: github.event.inputs.commit || github.event.workflow_run.conclusion == 'success'
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/openvscode-server
          ref: ${{ env.RELEASE_COMMIT }}
          token: ${{ secrets.VSCODE_GITHUB_TOKEN }}

      - name: Execute yarn
        run: |
          set -e
          export npm_config_arch=x64
          yarn --cwd remote --frozen-lockfile --network-timeout 180000

      - name: Compress node_modules output
        run: |
          set -e
          tar -cz --ignore-failed-read -f reh_node_modules-x64.tar.gz -C ./remote node_modules

      - name: Upload compiled dependencies
        uses: actions/upload-artifact@v3
        with:
          name: reh_node_modules-x64
          path: reh_node_modules-x64.tar.gz

  build:
    runs-on: ubuntu-latest
    container:
      image: gitpod/openvscode-server-linux-build-agent:bionic-x64
      env:
        OS_NAME: 'linux'
        VSCODE_ARCH: 'x64'

    name: Build linux-x64
    needs: build-dependencies
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/openvscode-server
          ref: ${{ env.RELEASE_COMMIT }}
          path: openvscode-server
          token: ${{ secrets.VSCODE_GITHUB_TOKEN }}

      - name: Auth Google Cloud SDK
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Set up Docker
        run: |
          gcloud auth configure-docker --quiet

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Yarn
        run: npm install -g yarn

      - name: Compute node modules cache key
        working-directory: ./openvscode-server
        id: nodeModulesCacheKey
        run: echo "value=$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js x64" >> $GITHUB_OUTPUT
      - name: Cache node modules
        id: cacheNodeModules
        uses: actions/cache@v3
        with:
          path: "openvscode-server/**/node_modules"
          key: ${{ runner.os }}-cacheNodeModulesLinux-${{ steps.nodeModulesCacheKey.outputs.value }}
      - name: Get yarn cache directory path
        working-directory: ./openvscode-server
        id: yarnCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Cache yarn directory
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarnCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-yarnCacheDir-${{ steps.nodeModulesCacheKey.outputs.value }}
          restore-keys: ${{ runner.os }}-yarnCacheDir-
      - name: Execute yarn
        working-directory: ./openvscode-server
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
        run: |
          set -e
          export npm_config_arch="x64"
          yarn --frozen-lockfile --network-timeout 180000

      - name: Download server build dependencies
        uses: actions/download-artifact@v3
        with:
          name: reh_node_modules-x64
          path: ./openvscode-server

      - name: Extract server node_modules output
        working-directory: ./openvscode-server
        run: |
          set -e
          rm -rf remote/node_modules
          tar -xzf reh_node_modules-x64.tar.gz --directory ./remote

      - name: Update product.json
        working-directory: ./openvscode-server
        run: |
          set -e
          nameShort=$(jq --raw-output '.nameShort' product.json)
          nameLong=$(jq --raw-output '.nameLong' product.json)
          if [ "$QUALITY" = "insider" ]; then
            nameShort="$nameShort - Insiders"
            nameLong="$nameLong - Insiders"
          fi
          setQuality="setpath([\"quality\"]; \"$QUALITY\")"
          setNameShort="setpath([\"nameShort\"]; \"$nameShort\")"
          setNameLong="setpath([\"nameLong\"]; \"$nameLong\")"
          setExtensionsGalleryItemUrl="setpath([\"extensionsGallery\", \"itemUrl\"]; \"{{extensionsGalleryItemUrl}}\")"
          addTrustedDomain=".linkProtectionTrustedDomains += [\"{{trustedDomain}}\"]"
          jqCommands="${setQuality} | ${setNameShort} | ${setNameLong} | ${setExtensionsGalleryItemUrl} | ${addTrustedDomain}"
          cat product.json | jq "${jqCommands}" > product.json.tmp
          mv product.json.tmp product.json

          jq '{quality,nameLong,nameShort}' product.json

      - name: Prepare for distribution
        working-directory: ./openvscode-server
        run: |
          set -e
          yarn gulp compile-build
          yarn gulp extensions-ci
          yarn gulp minify-vscode-reh
          yarn gulp vscode-web-min-ci
          yarn gulp vscode-reh-linux-x64-min-ci

      - name: Custom Gitpod stuff
        run: |
          set -e

          # config for first layer needed by blobserve
          # this custom urls will be then replaced by blobserve.
          # Check pkg/blobserve/blobserve.go, `inlineVars` method
          cp vscode-web/out/vs/gitpod/browser/workbench/workbench.html vscode-web/index.html
          cp vscode-web/out/vs/gitpod/browser/workbench/callback.html vscode-web/callback.html
          
          sed -i -e 's#baseUrl =.*;#baseUrl = window.location.origin;#g' vscode-web/index.html
          sed -i -e 's#{{WORKBENCH_WEB_BASE_URL}}#.#g' vscode-web/index.html
          sed -i -e "s/{{VERSION}}/$CODE_QUALITY-$CODE_COMMIT/g" vscode-web/index.html

          # cli config: alises to gitpod-code
          cp vscode-reh-linux-x64/bin/remote-cli/gitpod-code vscode-reh-linux-x64/bin/remote-cli/code
          cp vscode-reh-linux-x64/bin/remote-cli/gitpod-code vscode-reh-linux-x64/bin/remote-cli/gp-code
          cp vscode-reh-linux-x64/bin/remote-cli/gitpod-code vscode-reh-linux-x64/bin/remote-cli/open

          # grant write permissions for built-in extensions
          chmod -R ugo+w vscode-reh-linux-x64/extensions

      - name: Store release data
        id: release_data
        run: |
          set -e
          version=$(node -p -e "require('./openvscode-server/package.json').version")
          release_commit=$(git -C openvscode-server rev-parse "${RELEASE_COMMIT}")

          echo "release_commit=${release_commit}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "quality=${QUALITY}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            eu.gcr.io/gitpod-core-dev/build/ide/code
          tags: |
            type=raw,value=commit-${{ steps.release_data.outputs.release_commit }}
            type=raw,value=${{ steps.release_data.outputs.version }},enable=${{ steps.release_data.outputs.quality == 'stable' }}
            type=raw,value=latest,enable=${{ steps.release_data.outputs.quality == 'stable' }}
            type=raw,value=insiders,enable=${{ steps.release_data.outputs.quality != 'stable' }}
            type=raw,value=nightly,enable=${{ steps.release_data.outputs.quality != 'stable' }}

      - name: Docker build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          context: .
          file: gitpodCode.Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            io.gitpod.ide.version=${{ steps.release_data.outputs.version }}
            io.gitpod.ide.commit=${{ steps.release_data.outputs.release_commit }}
      
      - name: Output the image tag to the GitHub Summary
        run: |
          echo "Successfully built the \`Gitpod Code\` with the tag:" >> summary.md
          echo "" >> summary.md
          echo "\`\`\`" >> summary.md
          echo "commit-${{ steps.release_data.outputs.release_commit }}" >> summary.md
          echo "\`\`\`" >> summary.md
          cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Get previous job's status
        id: lastrun
        uses: filiptronicek/get-last-job-status@main

      - name: Slack Notification
        if: ${{ (success() && steps.lastrun.outputs.status == 'failed') || failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
